plugins {
    id "org.jetbrains.kotlin.jvm"
    id "application"
    id "org.jetbrains.kotlin.plugin.jpa"
    id "com.github.johnrengelman.shadow"
}

sourceCompatibility = 14

mainClassName = "io.ktor.server.netty.EngineMain"

dependencies {
    compile("io.ktor:ktor-server-netty:$ktorVersion")
    implementation("io.ktor:ktor-jackson:$ktorVersion")
    implementation("io.ktor:ktor-serialization:$ktorVersion")
    implementation "io.ktor:ktor-freemarker:$ktorVersion"
    compile("io.ktor:ktor-auth-jwt:$ktorVersion")
    compile("ch.qos.logback:logback-classic:$logbackVersion")

    implementation("org.kodein.di:kodein-di-conf:$kodeinVersion")

    //compile("org.postgresql:postgresql:$pgDriverVersion")
    compile("com.h2database:h2:$h2Version")
    implementation("org.hibernate:hibernate-core:$hibernateVersion")
    implementation("com.zaxxer:HikariCP:$hikariCPVersion")
    implementation("org.hibernate:hibernate-hikaricp:$hibernateVersion")
    implementation("com.vladmihalcea:hibernate-types-52:$hibernateTypesVersion")
    implementation("org.javassist:javassist:$javassistVersion")

    implementation("jakarta.xml.bind:jakarta.xml.bind-api:$jaxbVersion")
    implementation("org.glassfish.jaxb:jaxb-runtime:$jaxbVersion")

    api("io.ktor:ktor-client-apache:$ktorVersion")

    testImplementation("org.hibernate:hibernate-testing:$hibernateVersion")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("ch.qos.logback:logback-classic:$logbackVersion")

    testCompile "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
    testCompile "org.junit.jupiter:junit-jupiter-params:$junitJupiterVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"

    testCompile "org.testcontainers:testcontainers:$testcontainersVersion"
    testCompile "org.testcontainers:junit-jupiter:$testcontainersVersion"
    testCompile "org.testcontainers:postgresql:$testcontainersVersion"

    api(project(":common"))
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

//def frontendDistPath = "../frontend/build/distributions"
//def destFrontendPathInJar = "/static"

jar {
//    from(frontendDistPath) {
//        include("**/*.*")
//        into(destFrontendPathInJar)
//    }
}

// This task will generate your fat JAR and put it in the ./build/libs/ directory
shadowJar {
    manifest {
        attributes 'Main-Class': mainClassName
    }

//    from(frontendDistPath) {
//        include("**/*.*")
//        into(destFrontendPathInJar)
//    }
}